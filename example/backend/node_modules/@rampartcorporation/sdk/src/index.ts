import * as jwt from "jsonwebtoken";
import axios, { AxiosError, AxiosResponse } from "axios";
import { RampartClientConfig, SsoTokenPayload } from "./types.js";

export class RampartClient {
  private secret: string;
  private environment: "production" | "development";
  
  constructor(config: RampartClientConfig) {
    if (!config.secret) {
      throw new Error("RampartClient requires a secret");
    }
    this.secret = config.secret;
    this.environment = config.environment || "production";
  }

  /**
   * Generates a signed SSO token and returns a link to the Rampart SSO page.
   */
  async generateRampartLink(payload: SsoTokenPayload): Promise<AxiosResponse> {
    // Generate JWT token with payload
    const token = jwt.sign(payload, this.secret, {
      algorithm: "HS256",
      // expiresIn: '24h', // Example if you want to control expiration
    });

    // 2. Initialize SSO session (POST recommended for security)
    try {
      const apiBaseUrl =
        this.environment === "production"
          ? "https://api.rampartcorporation.com"
          : "http://localhost:3000";

      const response = await axios.post(`${apiBaseUrl}/auth/sso`, {
        token,
      });
      if (response.data?.link && typeof response.data.link === "string") {
        return response;
      }
      throw new Error("Invalid response from SSO initialization");
    } catch (error: unknown) {
      if (axios.isAxiosError(error)) {
        const axErr = error as AxiosError;
        const status = axErr.response?.status;
        const data = axErr.response?.data;
        throw new Error(
          `SSO initialization failed [${status}]: ${JSON.stringify(data)}`
        );
      }
      throw new Error(`SSO initialization failed: ${String(error)}`);
    }
  }
}
